language: python
python: "2.7"
sudo: false
cache: pip
addons:
  postgresql: "9.4"

services:
  - postgresql
  - redis-server
env:
  matrix:
    - TOXENV=py27
  global:
    - TEST_DATABASE_URI='postgresql://postgres:@localhost/portal_unit_tests'
    - LOG_FOLDER='/tmp/shared_service_log'
    - PACKAGE_NAME=${PACKAGE_NAME:-true_nth_usa_portal}
    - IMAGE_NAME=${IMAGE_NAME:-portal_web}
    - BINTRAY_DEB_REPO=${BINTRAY_DEB_REPO:-true_nth}
    - BINTRAY_DOCKER_REPO=${BINTRAY_DOCKER_REPO:-portal}
    - BINTRAY_USERNAME=${BINTRAY_USERNAME:-uwcirg}

matrix:
  include:
    - env: TOXENV=docs
      services: []
      addons: {}
    - env: TOXENV=ui
      addons:
        postgresql: "9.4"
        sauce_connect: true
    - env: TOXENV=build
      services:
        - docker
  # Build artifacts only (no testing)
  allow_failures:
    - env: TOXENV=build
      services:
        - docker

before_install:
  # Set Github env vars
  - IFS=/ read GH_USERNAME GH_REPO <<< "$TRAVIS_REPO_SLUG"
  - export GH_USERNAME GH_REPO
  - export SHORT_HASH=${TRAVIS_COMMIT::8}

  # Only deploy from develop and master branches, and not previously configured
  - if [[ ! -v DEPLOY && ("$TRAVIS_BRANCH" = "master" || "$TRAVIS_BRANCH" = "develop") ]]; then
      export DEPLOY=true
    ;fi

  # Set TOXENV default (if not already set by matrix environmental variables)
  - if [[ ! -v TOXENV ]]; then export TOXENV=py27;fi

  # Fetch all remote branches instead of just the currently checked out one
  - git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
  # setuptools_scm module needs the git history since the last master branch to correctly calculate the number of revisions since then (ie devNNN in 16.12.8.3.dev274+ngd08a23c)
  - git fetch --unshallow

  - psql --command 'create database portal_unit_tests owner postgres;' --username postgres

  - pip install --upgrade pip setuptools
  - export PORTAL_VERSION="$(python setup.py --version)"

install:
  - pip install tox

script:
  - tox

after_success:
  # Only run build steps in corresponding tox env
  - if [[ "$TOXENV" != "build" ]]; then travis_terminate 0;fi

  # Set docker tag based on branch
  - declare -A TAGS=(["develop"]="latest" ["master"]="stable"); export TAG=${TAGS["${TRAVIS_BRANCH}"]:-${TRAVIS_BRANCH//\//_}}
  - export TAG=${TRAVIS_TAG:-${TAG}}

  - docker pull "uwcirg-docker-true_nth.bintray.io/deb_builder:latest"
  - docker volume create --name debian-repo
  # Build artifacts from current repo and branch (else "develop")
  - docker run
      --volume debian-repo:/tmp/artifacts
      --env REPO_SLUG=$TRAVIS_REPO_SLUG
      --env BRANCH=${TRAVIS_BRANCH:-develop}
    "uwcirg-docker-true_nth.bintray.io/deb_builder:latest"

  # Copy artifacts off volume mounted on previous container
  - docker cp $(docker ps --quiet --latest --filter ancestor="uwcirg-docker-true_nth.bintray.io/deb_builder:latest"):/tmp/artifacts /tmp
  # Copy artifacts to current directory to allow local installation
  - cp --recursive --verbose /tmp/artifacts artifacts
  - docker build
      --file docker/Dockerfile
      --tag "$IMAGE_NAME:$SHORT_HASH"
      --tag "$IMAGE_NAME:$TAG"
      --tag "$IMAGE_NAME:$TRAVIS_BUILD_NUMBER"
    .

before_deploy:
  - export DOCKER_CLOUD_USERNAME=${DOCKER_CLOUD_USERNAME:-${GH_USERNAME//-}}
  - docker login
      --username "$BINTRAY_USERNAME"
      --password "$BINTRAY_API_KEY"
    "$GH_USERNAME-docker-$BINTRAY_DOCKER_REPO.bintray.io"
  - if [[ -v DOCKER_CLOUD_API_KEY ]]; then
      docker login
        --username "$DOCKER_CLOUD_USERNAME"
        --password "$DOCKER_CLOUD_API_KEY"
      https://index.docker.io/v1/
    ;fi

  - if [[ -v HEROKU_API_KEY ]]; then
      docker login
        --username "$HEROKU_USERNAME"
        --password "$HEROKU_API_KEY"
      https://registry.heroku.com/
    ;fi

  # Build bintray descriptor file dynamically
  - >
    printf '
    {
        "package": {
            "name": "$PACKAGE_NAME",
            "repo": "$BINTRAY_DEB_REPO",
            "subject": "$GH_USERNAME",
            "public_download_numbers": false,
            "public_stats": false
        },
        "version": {
            "name": "$PORTAL_VERSION",
            "gpgSign": true
        },
        "files": [
            {
                "includePattern": "artifacts/(.+\\.deb)$",
                "uploadPattern": "artifacts/$1",
                "matrixParams": {
                    "deb_distribution": "stable",
                    "deb_component": "main",
                    "deb_architecture": "amd64"
                }
            }
        ],
        "publish": true
    }
    ' | envsubst | tee "${TRAVIS_BUILD_DIR}/bintray.json"

# Only deploy from default virtual env TravisCI job
deploy:
  - provider: bintray
    on:
      all_branches: true
      condition:
        - $TOXENV = build
        - $DEPLOY = true
        - -v BINTRAY_API_KEY
    file: "bintray.json"
    user: $BINTRAY_USERNAME
    key: $BINTRAY_API_KEY

after_deploy:
  # Deploy images to Bintray
  - docker tag
    "$IMAGE_NAME:$TAG"
    "$GH_USERNAME-docker-$BINTRAY_DOCKER_REPO.bintray.io/$IMAGE_NAME:$TAG"
  - docker push "$GH_USERNAME-docker-$BINTRAY_DOCKER_REPO.bintray.io/$IMAGE_NAME:$TAG"

  # Deploy to Docker Hub, if configured
  - docker tag
    "$IMAGE_NAME:$TAG"
    "$DOCKER_CLOUD_USERNAME/$IMAGE_NAME:$TAG"
  - if [[ -v DOCKER_CLOUD_API_KEY ]]; then
      docker push "docker.io/$DOCKER_CLOUD_USERNAME/$IMAGE_NAME"
    ;fi

  # Deploy to Heroku, if configured
  - if [[ -v HEROKU_API_KEY ]]; then
      docker tag "$IMAGE_NAME:$TAG" "registry.heroku.com/$HEROKU_APP/web";
      docker push "registry.heroku.com/$HEROKU_APP/web";
    fi
